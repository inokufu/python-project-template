[project]
name = "{{ package_name }}"
version = "0.1.0"
description = "{{ project_description }}"
authors = [
  { name = "{{ author_name }}", email = "{{ author_email }}" }
]
dependencies = [
    "mkdocs~=1.6.1",
    "mkdocstrings-python~=1.16.6",
    "mkdocs-material~=9.6.9",
    "griffe-inherited-docstrings~=1.1.1",
]
readme = "docs/README.md"
requires-python = ">= {{ min_python_version }}"

[tool.rye]
managed = true
dev-dependencies = [
    "diff-cover~=9.2.4",
    "pre-commit~=4.2.0",
    "pytest-cov~=6.0.0",
    "pytest-mock~=3.14.0",
    "pytest~=8.3.5",
]

[tool.rye.scripts]

[tool.ruff]
output-format = "concise"
target-version = "py{{ min_python_version|replace('.', '') }}"
line-length = 88
indent-width = 4

lint.pydocstyle.convention = "google"
lint.flake8-bandit.check-typed-exception = true
lint.flake8-type-checking.strict = true

lint.select = ["ALL"]
lint.ignore = [
  "PLE1205", # logging-too-many-args
  "D100", # pydocstyle
  "EM", # flake8-errmsg
  "INP001", # implicit-namespace-package
  "TRY003", # raise-vanilla-args
  "TRY401", # verbose-log-message
]
lint.extend-unfixable = [
  "TC002", # typing-only-third-party-import
  "TRY400", # error-instead-of-exception
  "SIM105", # suppressible-exception
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
    "S101", # Asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.pytest.ini_options]
pythonpath = [".", "src"]
addopts = "--cov=src --cov-report=term --cov-report=xml"

[tool.coverage.report]
exclude_lines = [
  "@abstractmethod"
]
